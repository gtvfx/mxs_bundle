copyright=/***************************************************************************************************\nCopyright (C) 2013 - 2017  Gavyn Thompson\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program. if not, see <http://www.gnu.org/licenses/>.\n***************************************************************************************************/\n
mxsdoc=/***************************************************************************************************\n__MXSDOC__\nAuthor: Gavyn Thompson\nE-mail: gftvfx@gmail.com\nCompany: GTVFX\n__END__\n***************************************************************************************************/\n
helpBlock=/*\n__HELP__\n\nConstructor: \nInstantiated Global: \n\nMethods:\n\n\n\n__END__\n*/\n\n

/* LOGGER */
::Logger.info=::Logger.info "|" args:#() cls:this
::Logger.debug=::Logger.debug "|" args:#() cls:this
::Logger.error=::Logger.error "|" args:#() cls:this
::Logger.warning=::Logger.warning "|" args:#() cls:this
::Logger.critical=::Logger.critical "|" args:#() cls:this

/* Doc String */
doc=/*DOC_--------------------------------------------------------------------\nDESCRIPTION|\n\nArgs:\n \tARG1 (type)\n\nReturns:\n\tVOID\n\n--------------------------------------------------------------------_END*/
dochelp=/*DOC_--------------------------------------------------------------------\n__HELP__\n\nDESCRIPTION|\n\nMembers:\n\t\n\n__END__\n--------------------------------------------------------------------_END*/

/* PYTHON */
pe=python.execute "|"

/* VALUES */
arr=arr = #()
varr =valArr = #(100, 200, 300, 400, 500)
sarr =strArr = #("STR", "STR", "STR", "STR", "STR")
oarr=objArr = #(VAR, VAR, VAR, VAR, VAR)
marr=multyArr = #(#(VAR, VAR), #(VAR, VAR), #(VAR, VAR))
p2=[100,200] 
p3=[100,200,300]
str=""
asa=as array
ass=as string
asn=as name
asi=as integer
asf=as float
cp=convertToPoly obj
cm=convertToMesh obj
cs=convertToSplineShape spl
sam=snapshotAsMesh obj

/* CODE STRUCTURES */
stc=struct NAME\n(\n\tVAR1,\n\tVAR2,\n\tfn\n)
fn=fn FNNAME VAR1 VAR2: =\n(\n\tCODE\n)
mfn=mapped fn FNNAME VAR1 VAR2: =\n(\n\tCODE\n)
ifte=if ARG then\n(\n\tSTATE1\n)\nelse\n(\n\tSTATE2\n)
ifd=if ARG do\n(\n\tSTATE\n)
cof=case of (\n\t(ARG1a==ARG1b): (CODE)\n\t(ARG2a==ARG2b): (CODE)\n\t(ARG3a==ARG3b): (CODE)\n\tdefault: (CODE)\n)
cvof=case ARG of (\n\t(ARG1): (CODE)\n\t(ARG2): (CODE)\n\t(ARG3): (CODE)\n\tdefault: (CODE)\n)
foro=for o in WHAT do\n(\n\t\n)\n
foroc=VAR = for o in WHAT collect\n(\n\t\n)\n
forow=for o in WHAT where ARG1 == ARG2 do\n(\n\t\n)\n
forowc=VAR = for o in WHAT where ARG1 == ARG2 collect\n(\n\t\n)\n
fori=for i = 1 to count do\n(\n\t\n)\n
foric=VAR = for i = 1 to count collect\n(\n\t\n)\n
foriw=for i = 1 to count where ARG1 == ARG2 do\n(\n\t\n)\n
foriwc=VAR = for i = 1 to count where ARG1 == ARG2 collect\n(\n\t\n)\n
foribw=for i = 1 to count by NM where ARG1 == ARG2 do\n(\n\t\n)\n
foribwc=VAR = for i = 1 to count by NM where ARG1 == ARG2 collect\n(\n\t\n)\n
forc = for i = count to 1 by -1 go\n(\n\t\n)\n
forcc = for i = count to 1 by -1 collect\n(\n\t\n)\n
forcw = for i = count to 1 by -1 where ARG1 == ARG2 do\n(\n\t\n)\n
forcwc = for i = count to 1 by -1 where ARG1 == ARG2 collect\n(\n\t\n)\n

/* CUSTOM ATTRIBUTES */
attr=def = attributes theDef "NAME(OPTIONAL)"\n(\n\tparameters main rollout:params\n\t(\n\t\tpar\n\t)\n\trollout params "NAME"\n\t(\n\t\tspn\n\t)\n\t\n)\ncustAttributes.add $ def
par= name type:# ui: default:
parf=name type:#float ui: default:

/* MXS_CONTROLS */
roll=try(destroyDialog ::bgaRoll)catch()\nrollout bgaRoll "� � �"\n(\n\tlocal VAR\n\t\n\tMXSCTRL C "" pos:[x,y] width:NM height:NM\n\ton MXSCTRL EV do\n\t(\n\t\tCODE\n\t)\n\t\n\ton bgaRoll open do\n\t(\n\t\tCODE\n\t)\n\ton bgaRoll close do\n\t(\n\t\tCODE\n\t)\n)\ncreateDialog bgaRoll| W H X Y style:#(#style_titlebar, #style_sysmenu, #style_toolwindow)
btn=button btn| "" width: height: offset:[0,0] across:
pbn=pickButton pbn| "" width: height: offset:[0,0] across:
spn=spinner spn| "" width: fieldWidth: range:[,,] type:# offset:[0,0] across:
chb=checkButton chb| "" width: height: offset:[0,0] across:
ddl=dropDownList ddl| "" width: height: offset:[0,0] across:
grp=group ""\n(\n\tbtn\n\tspn\n\tchb\n\tpbn\n)
clr=colorpicker clr| "" color: alpha: fieldWidth: height: modal: title: offset:[0,0] across:
lbl=label lbl| "" offset:[0,0] across:

/* EVENT HANDLERS */
onb=on btn| pressed do\n(\n\t\n)
ons=on spn| changed val do\n(\n\t\n)
onc=on chb| picked obj do\n(\n\t\n)

/* GTVFX */
thispath=(GetFileNamePath (GetThisScriptFilename()))
sysEnv=sysEnv = ::mxs.GetSysEnv()
sysEnv.GetEnv=sysEnv.GetEnvironmentVariable "|"
sysEnv.SetEnv=sysEnv.SetEnvironmentVariable "|"

dict=dict = dotNetObject "System.Collections.Hashtable"
dic=dotNetObject "System.Collections.Hashtable"
dhash=dotNetObject "System.Collections.Hashtable"

bg=backgroundImageFileName
envMap=environmentMap


.it=.item["|"]

cline=/************************************************************/
cblock=/******************************************************************************************\n|\n******************************************************************************************/

cd=createDialog |

ifthen=if | then\n(\n\t\n)\nelse\n(\n\t\n)\n
ifdo=if | do\n(\n\t\n)

forx=for x = 1 to |.count do\n(\n\t\n)\n

onbtn=on | pressed do\n(\n\t\n)
onchk=on | changed state do\n(\n\t\n)

helpfns=fn GetModule =\n(\n\t/*DOC_--------------------------------------------------------------------\n\tGet the full path to the current MaxScript file\n\n\tReturns:\n\t\tString\n\t--------------------------------------------------------------------_END*/\n\n\t( GetSourceFileName() )\n),\n\nfn Help _fn: =\n(\n\t/*DOC_--------------------------------------------------------------------\n\tGet help on the current module or a specific function\n\n\tKwargs:\n\t\t_fn (string) : Name of the internal method as a string\n\n\tReturns:\n\t\tVOID\n\n\t--------------------------------------------------------------------_END*/\n\n\t::mxs.GetScriptHelp ( GetSourceFileName() ) _fn:_fn\n),
newStruct=struct |\n(\npublic\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\thelpfns,\n\nprivate\n\n\tfn _init =\n\t(\n\t\t/*DOC_--------------------------------------------------------------------\n\t\tThis method is run upon instantiation of the struct\n\t\t\n\t\tReturns:\n\t\t\t(VOID)\n\t\t\n\t\t--------------------------------------------------------------------_END*/\n\t\t\n\t\t-- Pass\n\t),\n\n\t__init__ = _init()\n)\n\n
newStructRo=try(destroyDialog structGlobal.ro)catch()\n\nstruct |\n(\npublic\n\n\tshowUi = True,\n\tro,\n\n\n\n\n\n\n\n\tfn ui =\n\t(\n\t\trollout ro "TITLE" width:300\n\t\t(\n\t\t\tlocal self\n\t\t\t\n\t\t\tfn _init pself =\n\t\t\t(\n\t\t\t\tself = pself\n\t\t\t)\n\t\t\n\t\t\)\n\t\t\tcreateDialog ro\n\t\t\tro._init self\n\t),\n\t\n\tfn GetModule =\n\t(\n\t\t( GetSourceFileName() )\n\t),\n\t\n\tfn Help =\n\t(\n\t\t::mxs.GetScriptHelp ( GetSourceFileName() )\n\t),\n\t\nprivate\n\t\n\tfn __init__ =\n\t(\n\t\tif this.showUi then\n\t\t(\n\t\t\tthis.ui()\n\t\t)\n\t),\n\t\n\t_init = this.__init__()\n)\n\n



fnCom=/*****************************************************************************(\n[ARGUMENTS]\n|\n[DESCRIPTION]\n\n[RETURN]\n\n)*****************************************************************************/
fns=fn | =\n(\n\t\n),\n

@=@"|"

(=(\n\t|\n)
(else=(\n\t|\n)\nelse\n(\n\t\n)
then=then\n(\n\t|\n)\nelse\n(\n\t\n)

pos=pos:[|]
tool=tooltip:"|"
range=range:[|0,100,1]

format=format "***** | *****\\n"
feedback_maj=format "========================= | =========================\\n"
feedbackend_maj = format "=====================================================================\\n"
feedback=format "=============== | ===============\\n"
feedbackend=format "======================================\\n"

case=case | of\n(\n\t\n)\n
case2=case | of\n(\n\txxx:\n\t(\n\t\t\t\n\t)\n\txxx:\n\t(\n\t\t\t\n\t)\n\tdefault:\n\t(\n\t\t\t\n\t)\n)\n
case3=case | of\n\t(\n\t\txxx:\n\t\t\t(\n\t\t\t\t\n\t\t\t)\n\t\txxx:\n\t\t\t(\n\t\t\t\t\n\t\t\t)\n\t\txxx:\n\t\t\t(\n\t\t\t\t\n\t\t\t)\n\t\tdefault:\n\t\t\t(\n\t\t\t\t\n\t\t\t)\n\t)\n
case4=case | of\n\t(\n\t\txxx:\n\t\t\t(\n\t\t\t\t\n\t\t\t)\n\t\txxx:\n\t\t\t(\n\t\t\t\t\n\t\t\t)\n\t\txxx:\n\t\t\t(\n\t\t\t\t\n\t\t\t)\n\t\txxx:\n\t\t\t(\n\t\t\t\t\n\t\t\t)\n\t\tdefault:\n\t\t\t(\n\t\t\t\t\n\t\t\t)\n\t)\n
case5=case | of\n\t(\n\t\txxx:\n\t\t\t(\n\t\t\t\t\n\t\t\t)\n\t\txxx:\n\t\t\t(\n\t\t\t\t\n\t\t\t)\n\t\txxx:\n\t\t\t(\n\t\t\t\t\n\t\t\t)\n\t\txxx:\n\t\t\t(\n\t\t\t\t\n\t\t\t)\n\t\txxx:\n\t\t\t(\n\t\t\t\t\n\t\t\t)\n\t\tdefault:\n\t\t\t(\n\t\t\t\t\n\t\t\t)\n\t)\n
casevar=|:\n\t(\n\t\t\n\t)\n\n
casevar3=|:\n\t(\n\t\t\n\t)\n\nxxx:\n\t(\n\t\t\n\t)\n\nxxx:\n\t(\n\t\t\n\t)\n\n

fil=filterstring | "_"
match=matchPattern | pattern:"**" ignoreCase:true 
replace=substituteString | "from" "to"

getfile=getOpenFileName caption:"|" types:"Max(*.max)||*.max||All||*.*||"
savefile=getSaveFileName caption:"|" types:"Max(*.max)||*.max||All||*.*||"

selas=(selection as array)

message=messageBox "|" title:"GTVFX:"
yesno=yesNoCancelBox "|" title:"GTVFX"
query=queryBox "|" title:"GTVFX"\n(\n\t\n)\n
ifquery=if queryBox "|" title:"GTVFX" then\n(\n\t\n)\nelse\n(\n\t\n)

movefile=movString = "move /Y "\nmovString += currentFile + " "\nmovString += newFile\ndoscommand movString

yescase=yesNoval = yesNoCancelBox "|" title:"GTVFX"\n\ncase yesNoval of\n\t(\n\t\t#yes:\n\t\t\t(\n\t\t\t\t\n\t\t\t)\n\t\t#no:\n\t\t\t(\n\t\t\t\t\n\t\t\t)\n\t\t#cancel:\n\t\t\t(\n\t\t\t\t\n\t\t\t)\n\t)\n

try=try(|)catch()\n

fori=for i in selection do\n(\n\t|\n)\n

isopen=if ((try getDialogSize XXXXXX catch ()) == undefined) or ((try getDialogSize XXXXXX catch ()) == [0,0]) do\n\t(\n\t\t|\n\t)\n

note=/*|*/
notes=/*|*/\n
notem=/*\n|\n*/\n





